// последовательность 0 и 1 построена следующим образом:
// первый номер 1, все следующие строятся следующим образом:
// на очередной итерации берутся все предыдущие члены последовательности
// инвертируется и как бы паралельным переносом присоединяется справа
// к уже существующей, например:
// 1 0 01 0110 01101001 0110100110010110 и тд
// найти чему равен n-й член последовательности

class Solution{
    int s(int dl,int no){
        int otv=1;
        int[] adl=new int[dl];
        // вычисление необходимого количества итераций построения последовательности
        int it=0;//кол иттераций для построения последовательности
        int i=dl;//задана длина последовательности
        int dli=0;//истинная длинна последовательности что будет построена;
        while(i>=0){
            dli=dli+(int)Math.pow(2,it);
            i=i-dli;
            it++;
           // System.out.println(Math.pow(2,it-1)+" "+i+"  ит "+it);
        }
        it--;
        dli=dli+1-(int)Math.pow(2,it);
        System.out.println("зад дл "+dl+" ист длинна посл "+dli+" иттера  "+it);
        return otv;
    }
}



public class Main {
    public static void main(String[] args) {
        int dl;//длинна последовательности в памяти удет меньше чем - кратно иттерациям
        int no;//искомый номер
        Solution s=new Solution();
        s.s(18,4);

        System.out.println("Hello world!");
    }
}