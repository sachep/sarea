// последовательность 0 и 1 построена следующим образом:
// первый номер 1, все следующие строятся следующим образом:
// на очередной итерации берутся все предыдущие члены последовательности
// инвертируется и как бы паралельным переносом присоединяется справа
// к уже существующей, например:
// 1 0 01 0110 01101001 0110100110010110 и тд
// найти чему равен n-й член последовательности

// Solution -массив целых чисел - т.е. по 4 байта ! неэкономно
class Solution {
    int s(int dl, int no) {
        int otv = 1;
        // вычисление необходимого количества итераций
        // построения последовательности
        // и фактической ее длинны , чтоб меньше заданной
        int i = dl;//задана длина последовательности
        int it = 0;//кол иттераций для построения последовательности
        int dli = 0;//истинная длинна последовательности что будет построена;
        int st = 0;// текущее значение степени числа 2
        while (i > 0) {
            st = (int) Math.pow(2, it);
            dli = dli + st;
            i = i - st;
            it++;
            // System.out.println(Math.pow(2,it-1)+" "+i+"  ит "+it);
        }
        it--;
        dli = dli + 1 - st;//(int)Math.pow(2,it);
        int[] adl = new int[dli];// создание массива нужной длинны
        adl[0] = 1; // первый член последовательности
        int t = 1;//текущее место откуда начинать заполнять иттерацию
        int n;//
        for (int j = 1; j <= it; j++) {
            n = t; // запомнили текущее место
            for (int m = 0; m < n; m++) {
                adl[t] = adl[m] == 1 ? 0 : 1;
                //System.out.print(adl[t]+" ");
                t++;
            }
            //System.out.println();
        }
        //for (int a:adl){
        //    System.out.print(a+" ");
        //}
        System.out.println("зад дл " + dl + " ист длинна посл " + dli + " иттера  " + it);
        return adl[no];
    }
}


// Solution2 -массив реализован побитово в типе byte - т.е. в по 4х8 =
// в 32 раза экономнее по памяти
class Solution2 {
    int s(int dl, int no) {
        int otv = 1;
        // вычисление необходимого количества итераций
        // построения последовательности
        // и фактической ее длинны , чтоб меньше заданной
        int i = dl;//задана длина последовательности
        int it = 0;//кол иттераций для построения последовательности
        int dli = 0;//истинная длинна последовательности что будет построена;
        int st = 0;// текущее значение степени числа 2
        while (i > 0) {
            st = (int) Math.pow(2, it);
            dli = dli + st;
            i = i - st;
            it++;
        }
        it--;
        dli = dli + 1 - st;//истинная длинна массива
        int dlib = dli / 8;//ист длинна массива в байтах
        byte[] adl = new byte[dlib];// создание массива нужной длинны но в байтах
        adl[0] = (byte) 0B10010110; // первый член последовательности 1001 0110
        // это сразу выполнено 3 иттерации поэтому отнимем от от необх иттераций 3
        it = it - 3;
        ShowBits vb = new ShowBits(8);
        int aaa = 1;
        int t = 1;//текущее место откуда начинать заполнять иттерацию
        int n;//

        // формируем последовательность
        for (int j = 1; j <= it; j++) {
            n = t; // запомнили текущее место
            for (int m = 0; m < n; m++) {
                adl[t] = (byte) ~adl[m];//записываем байты с обращением битов
                t++;
            }
        }

        //for (int a : adl) {
        //    System.out.print(" ");
        //    vb.show(a);
        //}
        System.out.println();
        System.out.println("зад дл " + dl + " ист длинна посл " + dli + " иттера  " + it);
        System.out.println("no/8 " + no / 8 + " ,бит №  " + (7 - (no % 8)));
        return vb.getbit(adl[no / 8], 7 - (no % 8));

    }
}

public class Main {
    public static void main(String[] args) {
        int dl = 2100000000;//длинна последовательности в памяти будет меньше чем
        // - кратно иттерациям и +1 первый
        int no = 1;//искомый номер
        //Solution s = new Solution();//последовательность в целых чиселах
        Solution2 s = new Solution2();//последовательность в битах
        System.out.println(no + " й номер  послед равен " + s.s(dl, no));
    }
}